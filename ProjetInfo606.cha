<?xml version="1.0"?><st-source><component-created><name>info606</name> <type>package</type></component-created><component-property><name>info606</name> <type>package</type><property>comment</property> <value>'This object has not been commented.'</value></component-property><component-property><name>info606</name> <type>package</type><property>comment</property> <value>'Package pour le projet info606'</value></component-property><class><name>User</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>info606</package></attributes></class><methods><class-id>User</class-id> <category>accessing</category><body package="info606" selector="name">name	^name</body></methods><methods><class-id>User</class-id> <category>accessing</category><body package="info606" selector="name:">name: anObject	name := anObject</body></methods><methods><class-id>User</class-id> <category>initialize-release</category><body package="info606" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	name := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>User class</class-id> <category>instance creation</category><body package="info606" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><do-it>Smalltalk</do-it><comment><class-id>User</class-id><body>Instance Variables:	name	&lt;MessageForwarder | Object | ProtoObject | ProtoObject&gt;	description of name</body></comment><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>User</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>User</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>User removeFromSystem</do-it><class><name>Class</name><environment>Core</environment><super>Core.ClassDescription</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name classPool environment user </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Classes</category><attributes><package>Kernel-Classes</package></attributes></class><methods><class-id>Core.Class</class-id> <category>accessing</category><body package="Kernel-Classes" selector="user">user	^user</body></methods><methods><class-id>Core.Class</class-id> <category>accessing</category><body package="Kernel-Classes" selector="user:">user: anObject	user := anObject</body></methods><comment><class-id>Core.Class</class-id><body>Instances of class Class describe the representation and behavior of objects.  Class adds more comprehensive programming support facilities to the basic attributes of Behavior and the descriptive facilities of ClassDescription.  An example is accessing shared (pool) variables.Instance Variables:	name		&lt;Symbol&gt; name of class for printing and global reference	classPool	&lt;PoolDictionary | nil&gt; of variables common to all instances	environment	&lt;Namespace | nil&gt; the name space corresponding to this class	user		&lt;User&gt; name of user created the class</body></comment><class><name>UserArray</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>info606</package></attributes></class><methods><class-id>UserArray</class-id> <category>initialize-release</category><body package="info606" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>UserArray class</class-id> <category>instance creation</category><body package="info606" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>UserArray</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>UserArray</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>UserArray removeFromSystem</do-it><class><name>UserArray</name><environment>Smalltalk</environment><super>Core.Array</super><private>false</private><indexed-type>objects</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>info606</package></attributes></class><methods><class-id>UserArray</class-id> <category>initialize-release</category><body package="info606" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><comment><class-id>UserArray</class-id><body>UserArray has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.</body></comment><component-created><name>model</name> <type>package</type></component-created><component-created><name>info606</name> <type>bundle</type></component-created><bundle-structure><name>info606</name> <structure>#()</structure></bundle-structure><component-property><name>info606</name> <type>bundle</type><property>comment</property> <value>'This object has not been commented.'</value></component-property><component-created><name>model</name> <type>package</type></component-created><bundle-structure><name>info606</name> <structure>#(#(#package 'model'))</structure></bundle-structure><bundle-structure><name>info606</name> <structure>#(#(#package 'model'))</structure></bundle-structure><component-property><name>model</name> <type>package</type><property>comment</property> <value>'This object has not been commented.'</value></component-property><class><name>UserArray</name><environment>Smalltalk</environment><super>Core.Array</super><private>false</private><indexed-type>objects</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>model</package></attributes></class><methods><class-id>UserArray</class-id> <category>initialize-release</category><body package="model" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><comment><class-id>UserArray</class-id><body>UserArray has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.</body></comment><component-created><name>controller</name> <type>package</type></component-created><component-created><name>controller</name> <type>package</type></component-created><bundle-structure><name>info606</name> <structure>#(#(#package 'model') #(#package 'controller'))</structure></bundle-structure><bundle-structure><name>info606</name> <structure>#(#(#package 'model') #(#package 'controller'))</structure></bundle-structure><component-property><name>controller</name> <type>package</type><property>comment</property> <value>'This object has not been commented.'</value></component-property><component-created><name>view</name> <type>package</type></component-created><bundle-structure><name>info606</name> <structure>#(#(#package 'model') #(#package 'controller') #(#package 'view'))</structure></bundle-structure><bundle-structure><name>info606</name> <structure>#(#(#package 'model') #(#package 'controller') #(#package 'view'))</structure></bundle-structure><component-property><name>view</name> <type>package</type><property>comment</property> <value>'This object has not been commented.'</value></component-property><methods><class-id>UserArray class</class-id> <category>instance creation</category><body package="model" selector="searchAndCreate">searchAndCreate	"Search an instance of UserArray and create it if not exist"	</body></methods><methods><class-id>UserArray class</class-id> <category>accessing</category><body package="model" selector="classInstance">classInstance	^classInstance</body></methods><methods><class-id>UserArray class</class-id> <category>accessing</category><body package="model" selector="classInstance:">classInstance: anObject	classInstance := anObject</body></methods><methods><class-id>UserArray class</class-id> <category>instance creation</category><body package="model" selector="searchAndCreate">searchAndCreate	"Search an instance of UserArray and create it if not exist"		UserArray classInstance</body></methods><methods><class-id>UserArray class</class-id> <category>instance creation</category><body package="model" selector="searchAndCreate">searchAndCreate	"Search an instance of UserArray and create it if not exist"		((UserArray classInstance) = nil) ifTrue: [		UserArray classInstance: (UserArray new).		].		^(UserArray classInstance)</body></methods><comment><class-id>UserArray</class-id><body>UserArray has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.</body></comment><comment><class-id>UserArray</class-id><body>UserArray has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.classInstance -&gt; Variable pour la classe</body></comment><comment><class-id>UserArray</class-id><body>UserArray has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.</body></comment><class><name>ChoiceUserInterface</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>view</package></attributes></class><methods><class-id>ChoiceUserInterface class</class-id> <category>interface specs</category><body package="view" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Choice user' 			#bounds: #(#{Graphics.Rectangle} 10 32 300 91 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 12 0 17 0 148 0 38 0 ) 					#name: #MenuButton1 					#label: 					#(#{Kernel.UserMessage} 						#key: nil 						#defaultString: 'UserChoice' 						#catalogID: #'UserArray searchAndCreate' ) ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 181 0 17 0 264 0 38 0 ) 					#name: #ActionButton1 					#label: 'Manage users' 					#isDefault: false 					#defaultable: true ) ) ) )</body></methods><comment><class-id>ChoiceUserInterface</class-id><body>ChoiceUserInterface has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.</body></comment><class><name>ManageUserInterface</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>view</package></attributes></class><methods><class-id>ManageUserInterface class</class-id> <category>interface specs</category><body package="view" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Manage users' 			#bounds: #(#{Graphics.Rectangle} 879 539 1168 771 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 18 0 16 0 154 0 180 0 ) 					#name: #List1 					#model: #'UserArray searchAndCreate' 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 23 0 199 0 75 0 220 0 ) 					#name: #ActionButton1 					#label: 'Remove' 					#defaultable: true ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 178 0 16 0 278 0 41 0 ) 					#name: #InputField1 					#type: #string ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 222 0 53 0 274 0 74 0 ) 					#name: #ActionButton2 					#label: 'Add' 					#defaultable: true ) ) ) )</body></methods><comment><class-id>ManageUserInterface</class-id><body>ManageUserInterface has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.</body></comment><class><name>ManageUserController</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>controller</package></attributes></class><methods><class-id>ManageUserController</class-id> <category>initialize-release</category><body package="controller" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>ManageUserController class</class-id> <category>instance creation</category><body package="controller" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><comment><class-id>ManageUserController</class-id><body>ManageUserController has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.</body></comment><do-it>ScheduledWindow new    label: 'Hello';    open</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>ManageUserController</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>ManageUserController</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>ManageUserController removeFromSystem</do-it><methods><class-id>ManageUserInterface class</class-id> <category>interface specs</category><body package="view" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Manage users' 			#bounds: #(#{Graphics.Rectangle} 816 448 1105 680 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 18 0 16 0 154 0 180 0 ) 					#name: #userList 					#model: #userList 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 23 0 199 0 75 0 220 0 ) 					#name: #removeUser 					#model: #removeUser 					#label: 'Remove' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 222 0 53 0 274 0 74 0 ) 					#name: #addUser 					#model: #addUser 					#label: 'Add' 					#defaultable: true ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 177 0 17 0 277 0 42 0 ) 					#name: #userName 					#model: #userName ) ) ) )</body></methods><class><name>ManageUserInterface</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>userName userList </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>view</package></attributes></class><do-it>Smalltalk defineClass: #ManageUserInterface	superclass: #{UI.ApplicationModel}	indexedType: #none	private: false	instanceVariableNames: ' userName userList '	classInstanceVariableNames: ''	imports: ''	category: ''</do-it><methods><class-id>ManageUserInterface</class-id> <category>actions</category><body package="view" selector="addUser">addUser	"This stub method was generated by UIDefiner"	^self</body></methods><methods><class-id>ManageUserInterface</class-id> <category>actions</category><body package="view" selector="removeUser">removeUser	"This stub method was generated by UIDefiner"	^self</body></methods><methods><class-id>ManageUserInterface</class-id> <category>aspects</category><body package="view" selector="userName">userName	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^userName isNil		ifTrue:			[userName := String new asValue]		ifFalse:			[userName]</body></methods><methods><class-id>ManageUserInterface</class-id> <category>aspects</category><body package="view" selector="userList">userList	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^userList isNil		ifTrue:			[userList := SelectionInList new]		ifFalse:			[userList]</body></methods><methods><class-id>ManageUserInterface</class-id> <category>actions</category><body package="view" selector="addUser">addUser	self userName value.	^self</body></methods><methods><class-id>ManageUserInterface</class-id> <category>actions</category><body package="view" selector="addUser">addUser	self userName value.</body></methods><class><name>ManageUserController</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>controller</package></attributes></class><methods><class-id>ManageUserController</class-id> <category>initialize-release</category><body package="controller" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>ManageUserController class</class-id> <category>instance creation</category><body package="controller" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><comment><class-id>ManageUserController</class-id><body>ManageUserController has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.</body></comment><do-it>Array</do-it><methods><class-id>ManageUserController</class-id> <category>initialize-release</category><body package="controller" selector="addUser:">addUser: userName	UserArray searchAndCreate add: userName</body></methods><do-it>ManageUserController organization addCategory: #controlling</do-it><do-it>ManageUserController organization addCategory: #controlling</do-it><do-it>ManageUserController classifySymbol: #addUser: under: #controlling</do-it><methods><class-id>ManageUserInterface</class-id> <category>actions</category><body package="view" selector="addUser">addUser	| c |	c := ManageUserController new.	c addUser: self userName value.</body></methods><methods><class-id>ManageUserInterface</class-id> <category>actions</category><body package="view" selector="addUser">addUser	self userName value: 'Hello'.</body></methods><methods><class-id>ManageUserInterface</class-id> <category>actions</category><body package="view" selector="addUser">addUser	| c |	c := ManageUserController new.	c addUser: self userName value.</body></methods><methods><class-id>ManageUserInterface</class-id> <category>actions</category><body package="view" selector="addUser">addUser	self userName value: 'Hello'</body></methods><methods><class-id>ManageUserInterface</class-id> <category>actions</category><body package="view" selector="addUser">addUser	| c |	c := ManageUserController new.	self userName value: 'Hello'</body></methods><methods><class-id>ManageUserInterface</class-id> <category>actions</category><body package="view" selector="addUser">addUser	| c |	c = ManageUserController new.	self userName value: 'Hello'</body></methods><methods><class-id>ManageUserInterface</class-id> <category>actions</category><body package="view" selector="addUser">addUser	| c |	c = ManageUserController new.	c addUser: self userName value: 'Hello'</body></methods><methods><class-id>ManageUserInterface</class-id> <category>actions</category><body package="view" selector="addUser">addUser	| c |	c := ManageUserController new.	c addUser: self userName value: 'Hello'</body></methods><methods><class-id>ManageUserInterface</class-id> <category>actions</category><body package="view" selector="addUser">addUser	| c |	c := ManageUserController new.	c addUser: self userName value.</body></methods><methods><class-id>ManageUserController</class-id> <category>controlling</category><body package="controller" selector="addUser:">addUser: userName	"Add the user to the UserArray"</body></methods><methods><class-id>UserArray class</class-id> <category>instance creation</category><body package="model" selector="getInstance">getInstance	"Search an instance of UserArray and create it if not exist"		((UserArray classInstance) = nil) ifTrue: [		UserArray classInstance: (UserArray new).		].		^(UserArray classInstance)</body></methods><remove-selector><class-id>UserArray class</class-id> <selector>searchAndCreate</selector></remove-selector><methods><class-id>ManageUserController</class-id> <category>controlling</category><body package="controller" selector="addUser:">addUser: userName	"Add the user to the UserArray"		UserArray getInstance add: userName.</body></methods><do-it>UserArray organization addCategory: #adding</do-it><methods><class-id>UserArray</class-id> <category>adding</category><body package="model" selector="add:">add: anObject	self at: (self size +1) put: anObject.</body></methods><methods><class-id>UserArray</class-id> <category>adding</category><body package="model" selector="add:">add: anObject		self at: (self size +1) put: anObject.</body></methods><do-it>c := UserArray new.</do-it><remove-selector><class-id>UserArray</class-id> <selector>add:</selector></remove-selector><do-it>UserArray organization removeCategory: #adding</do-it><do-it>c</do-it><do-it>UserArray organization addCategory: #adding</do-it><methods><class-id>UserArray</class-id> <category>adding</category><body package="model" selector="add:">add: anObject</body></methods><methods><class-id>UserArray class</class-id> <category>instance creation</category><body package="model" selector="getInstance">getInstance	"Search an instance of UserArray and create it if not exist"		((UserArray classInstance) = nil) ifTrue: [		UserArray classInstance: (UserArray new: 10).		].		^(UserArray classInstance)</body></methods><methods><class-id>UserArray</class-id> <category>adding</category><body package="model" selector="add:">add: anObject	| i |	i := self indexOf: nil	</body></methods><methods><class-id>UserArray</class-id> <category>adding</category><body package="model" selector="add:">add: anObject	| i |	i := self indexOf: nil.	i isNil ifFalse: [		self at: i put: anObject.	].</body></methods><do-it>c := UserArray getInstance.</do-it><do-it>c</do-it><methods><class-id>UserArray class</class-id> <category>instance creation</category><body package="model" selector="getInstance">getInstance	"Search an instance of UserArray and create it if not exist"		UserArray classInstance isNil ifTrue: [		UserArray classInstance: (UserArray new: 10).		].		^(UserArray classInstance)</body></methods><do-it>c := UserArray getInstance.</do-it><do-it>c</do-it><do-it>c := UserArray new: 10.</do-it><do-it>c</do-it><remove-selector><class-id>UserArray class</class-id> <selector>getInstance</selector></remove-selector><do-it>UserArray class organization removeCategory: #'instance creation'</do-it><class><name>ManageUserController</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>users </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>controller</package></attributes></class><methods><class-id>ManageUserController</class-id> <category>accessing</category><body package="controller" selector="users">users	^users</body></methods><methods><class-id>ManageUserController</class-id> <category>accessing</category><body package="controller" selector="users:">users: anObject	users := anObject</body></methods><methods><class-id>ManageUserController</class-id> <category>controlling</category><body package="controller" selector="addUser:">addUser: userName	"Add the user to the UserArray"		self users add: userName.</body></methods><methods><class-id>ManageUserController</class-id> <category>initialize-release</category><body package="controller" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	self users = UserArray new: 10.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>ManageUserController</class-id> <category>initialize-release</category><body package="controller" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	self users = UserArray new.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>ManageUserController</class-id> <category>initialize-release</category><body package="controller" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	self users: UserArray new.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><do-it>c := ManageUserController new.</do-it><do-it>c</do-it><do-it>new</do-it><do-it>c := ManageUserController new.</do-it><do-it>c</do-it><do-it>new</do-it><do-it>c := ManageUserController new.</do-it><do-it>c := ManageUserController new.</do-it><do-it>c</do-it><methods><class-id>ManageUserController class</class-id> <category>instance creation</category><body package="controller" selector="new">new	"Answer a newly created and initialized instance."	| c |	c := super new initialize.		^c</body></methods><methods><class-id>ManageUserController class</class-id> <category>instance creation</category><body package="controller" selector="new">new	"Answer a newly created and initialized instance."	| c |	c := super new initialize.	c users: UserArray new: 10.	^c</body></methods><methods><class-id>ManageUserController class</class-id> <category>instance creation</category><body package="controller" selector="new">new	"Answer a newly created and initialized instance."	| c |	c := super new initialize.	^c</body></methods><do-it>c := ManageUserController new.</do-it><do-it>c</do-it><methods><class-id>ManageUserController class</class-id> <category>instance creation</category><body package="controller" selector="new">new	"Answer a newly created and initialized instance."	| c |	c := super new initialize.	c users: (UserArray new: 10).		^c</body></methods><do-it>c := ManageUserController new.</do-it><do-it>c</do-it><do-it>UserArray class organization addCategory: #'instance creation'</do-it><methods><class-id>UserArray class</class-id> <category>instance creation</category><body package="model" selector="getInstance">getInstance	(UserArray classInstance isNil) ifTrue: [		UserArray classInstance: (UserArray new: 10).		].</body></methods><methods><class-id>UserArray class</class-id> <category>instance creation</category><body package="model" selector="getInstance">getInstance	(UserArray classInstance isNil) ifTrue: [		UserArray classInstance: (UserArray new: 10).		].		^UserArray classInstance.</body></methods><methods><class-id>UserArray class</class-id> <category>instance creation</category><body package="model" selector="getInstance">getInstance	(UserArray classInstance isNil) ifTrue: [		UserArray classInstance: (UserArray new: 10).		].		^UserArray classInstance</body></methods><methods><class-id>ManageUserController class</class-id> <category>instance creation</category><body package="controller" selector="new">new	"Answer a newly created and initialized instance."	| c |	c := super new initialize.	c users: (UserArray getInstance).		^c</body></methods><methods><class-id>UserArray class</class-id> <category>instance creation</category><body package="model" selector="getInstance">getInstance	(UserArray classInstance isNil) ifTrue: [		UserArray classInstance: (UserArray new: 10).	].	(UserArray classInstance size = 0) ifTrue: [		UserArray classInstance: (UserArray new: 10).	].		^UserArray classInstance</body></methods><do-it>c := UserArray getInstance.</do-it><do-it>c</do-it><methods><class-id>ManageUserController</class-id> <category>controlling</category><body package="controller" selector="updateUserList">updateUserList</body></methods><methods><class-id>ManageUserController</class-id> <category>controlling</category><body package="controller" selector="addUser:">addUser: userName	"Add the user to the UserArray"		self users add: userName.	self updateUserList.</body></methods><do-it>Dialog    choose: 'Which one do you want?'    fromList: #('first' 'second' 'third' 'fourth')    values: #(1 2 3 4)    lines: 8    cancel: [#noChoice]</do-it><do-it>Dialog    choose: 'Which one do you want?'    fromList: #('first' 'second' 'third' 'fourth')    values: #(1 2 3 4)    lines: 8    cancel: [#noChoice]</do-it><methods><class-id>UserArray</class-id> <category>adding</category><body package="model" selector="add:">add: anObject	| i |	i := self indexOf: nil.	(i = -1) ifFalse: [		self at: i put: anObject.	].</body></methods><do-it>self indexOf: nil</do-it><methods><class-id>UserArray</class-id> <category>adding</category><body package="model" selector="add:">add: anObject	| i |	i := self indexOf: nil.	(i = 0) ifFalse: [		self at: i put: anObject.	].</body></methods><methods><class-id>UserArray</class-id> <category>adding</category><body package="model" selector="add:">add: anObject	| i b |	i := self indexOf: nil.	b := self indexOf: anObject.	((i = 0) &amp; (b = 0)) ifFalse: [		self at: i put: anObject.	].</body></methods><methods><class-id>UserArray</class-id> <category>adding</category><body package="model" selector="add:">add: anObject	| i b |	i := self indexOf: nil.	b := self indexOf: anObject.	((i = 0) &amp; (b ~= 0)) ifFalse: [		self at: i put: anObject.	].</body></methods><methods><class-id>ManageUserInterface class</class-id> <category>interface specs</category><body package="view" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Manage users' 			#bounds: #(#{Graphics.Rectangle} 871 714 1160 946 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 18 0 16 0 154 0 180 0 ) 					#name: #userList 					#model: #userList 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 23 0 199 0 75 0 220 0 ) 					#name: #removeUser 					#model: #removeUser 					#label: 'Remove' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 222 0 53 0 274 0 74 0 ) 					#name: #addUser 					#model: #addUser 					#label: 'Add' 					#defaultable: true ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 177 0 17 0 277 0 42 0 ) 					#name: #userName 					#model: #userName ) ) ) )</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/kevin/VisualWorks Projects/ProjetInfo606/ProjetInfo606.im' 'January 27, 2021' '7:13:28 PM')""An image file /home/kevin/VisualWorks Projects/ProjetInfo606/ProjetInfo606.im was created at 19:13:28 on 27 janvier 2021."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/kevin/VisualWorks Projects/ProjetInfo606/ProjetInfo606.im' 'January 27, 2021' '7:13:30 PM')""An image file /home/kevin/VisualWorks Projects/ProjetInfo606/ProjetInfo606.im was created at 19:13:30 on 27 janvier 2021."</do-it><methods><class-id>ManageUserInterface class</class-id> <category>interface specs</category><body package="view" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Manage users' 			#bounds: #(#{Graphics.Rectangle} 816 448 1105 680 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 18 0 16 0 154 0 180 0 ) 					#name: #userList 					#model: #userList 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 23 0 199 0 75 0 220 0 ) 					#name: #removeUser 					#model: #removeUser 					#label: 'Remove' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 222 0 53 0 274 0 74 0 ) 					#name: #addUser 					#model: #addUser 					#label: 'Add' 					#defaultable: true ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 177 0 17 0 277 0 42 0 ) 					#name: #userName 					#model: #userName ) ) ) )</body></methods><methods><class-id>ManageUserInterface class</class-id> <category>interface specs</category><body package="view" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Manage users' 			#bounds: #(#{Graphics.Rectangle} 827 473 1116 705 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 18 0 16 0 154 0 180 0 ) 					#name: #userList 					#model: #userList 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 23 0 199 0 75 0 220 0 ) 					#name: #removeUser 					#model: #removeUser 					#label: 'Remove' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 222 0 53 0 274 0 74 0 ) 					#name: #addUser 					#model: #addUser 					#label: 'Add' 					#defaultable: true ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 177 0 17 0 277 0 42 0 ) 					#name: #userName 					#model: #userName ) ) ) )</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/kevin/VisualWorks Projects/ProjetInfo606/ProjetInfo606.im' 'January 29, 2021' '9:50:01 AM')""An image file /home/kevin/VisualWorks Projects/ProjetInfo606/ProjetInfo606.im was created at 09:50:01 on 29 janvier 2021."</do-it><do-it>c := UserArray getInstance.</do-it><do-it>c</do-it><methods><class-id>ManageUserController</class-id> <category>controlling</category><body package="controller" selector="addUser:">addUser: userName	"Add the user to the UserArray"		self users add: userName.</body></methods><remove-selector><class-id>ManageUserController</class-id> <selector>updateUserList</selector></remove-selector><methods><class-id>ManageUserInterface class</class-id> <category>interface specs</category><body package="view" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Manage users' 			#bounds: #(#{Graphics.Rectangle} 816 448 1105 680 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 18 0 16 0 154 0 180 0 ) 					#name: #userList 					#model: #userList 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 23 0 199 0 75 0 220 0 ) 					#name: #removeUser 					#model: #removeUser 					#label: 'Remove' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 222 0 53 0 274 0 74 0 ) 					#name: #addUser 					#model: #addUser 					#label: 'Add' 					#defaultable: true ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 177 0 17 0 277 0 42 0 ) 					#name: #userName 					#model: #userName ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 227 0 198 0 279 0 219 0 ) 					#name: #OKButton 					#label: 'OK' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>ChoiceUserInterface class</class-id> <category>interface specs</category><body package="view" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Choice user' 			#bounds: #(#{Graphics.Rectangle} 828 551 1118 610 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 12 0 17 0 148 0 38 0 ) 					#name: #UserChoice 					#label: 					#(#{Kernel.UserMessage} 						#key: nil 						#defaultString: 'UserChoice' 						#catalogID: #'UserArray searchAndCreate' ) ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 181 0 17 0 264 0 38 0 ) 					#name: #ManageButton 					#label: 'Manage users' 					#isDefault: false 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 11 0 56 0 63 0 77 0 ) 					#name: #OKButton 					#label: 'OK' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 72 0 56 0 124 0 77 0 ) 					#name: #CancelButton1 					#label: 'Cancel' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>ManageUserInterface class</class-id> <category>interface specs</category><body package="view" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Manage users' 			#bounds: #(#{Graphics.Rectangle} 816 477 1105 709 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 18 0 16 0 154 0 180 0 ) 					#name: #userList 					#model: #userList 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #onChangeUserList ) 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 23 0 199 0 75 0 220 0 ) 					#name: #removeUser 					#model: #removeUser 					#label: 'Remove' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 222 0 53 0 274 0 74 0 ) 					#name: #addUser 					#model: #addUser 					#label: 'Add' 					#defaultable: true ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 177 0 17 0 277 0 42 0 ) 					#name: #userName 					#model: #userName ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 227 0 198 0 279 0 219 0 ) 					#name: #OKButton 					#label: 'OK' 					#defaultable: true ) ) ) )</body></methods><class><name>ManageUserInterface</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>userName userList </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>view</package></attributes></class><do-it>Smalltalk defineClass: #ManageUserInterface	superclass: #{UI.ApplicationModel}	indexedType: #none	private: false	instanceVariableNames: 'userName userList  '	classInstanceVariableNames: ''	imports: ''	category: ''</do-it><methods><class-id>ManageUserInterface</class-id> <category>aspects</category><body package="view" selector="userList">userList	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^userList isNil		ifTrue:			[userList := SelectionInList new]		ifFalse:			[userList]</body></methods><class><name>ManageUserInterface</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>userName userList </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>view</package></attributes></class><do-it>Smalltalk defineClass: #ManageUserInterface	superclass: #{UI.ApplicationModel}	indexedType: #none	private: false	instanceVariableNames: 'userName userList  '	classInstanceVariableNames: ''	imports: ''	category: ''</do-it><methods><class-id>ManageUserInterface</class-id> <category>aspects</category><body package="view" selector="userList">userList	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^userList isNil		ifTrue:			[userList := SelectionInList new]		ifFalse:			[userList]</body></methods><methods><class-id>ManageUserInterface class</class-id> <category>interface specs</category><body package="view" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Manage users' 			#bounds: #(#{Graphics.Rectangle} 816 477 1105 709 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 18 0 16 0 154 0 180 0 ) 					#name: #userList 					#model: #userList 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #onChangeUserList ) 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 23 0 199 0 75 0 220 0 ) 					#name: #removeUser 					#model: #removeUser 					#label: 'Remove' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 222 0 53 0 274 0 74 0 ) 					#name: #addUser 					#model: #addUser 					#label: 'Add' 					#defaultable: true ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 177 0 17 0 277 0 42 0 ) 					#name: #userName 					#model: #userName ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 227 0 198 0 279 0 219 0 ) 					#name: #OKButton 					#label: 'OK' 					#defaultable: true ) ) ) )</body></methods><do-it>ManageUserInterface organization addCategory: #changing</do-it><methods><class-id>ManageUserInterface</class-id> <category>changing</category><body package="view" selector="onChangeUserList">onChangeUserList</body></methods><do-it>ManageUserController</do-it><do-it>ManageUserController class</do-it><do-it>Object class</do-it><do-it>ManageUserInterface class</do-it><do-it>ManageUserController class</do-it><comment><class-id>ManageUserController</class-id><body>ManageUserController has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.users</body></comment><comment><class-id>ManageUserController</class-id><body>ManageUserController has not been commented.  The comment should state the purpose of the class and also explain any unobvious aspects of the implementation.</body></comment><do-it>SelectionInList</do-it><methods><class-id>ManageUserInterface</class-id> <category>actions</category><body package="view" selector="removeUser">removeUser	"This stub method was generated by UIDefiner"	| c |		^self</body></methods><methods><class-id>ManageUserController</class-id> <category>controlling</category><body package="controller" selector="removeUser:">removeUser: aUser</body></methods><methods><class-id>ManageUserController</class-id> <category>controlling</category><body package="controller" selector="removeUser:">removeUser: Username</body></methods><methods><class-id>ManageUserController</class-id> <category>controlling</category><body package="controller" selector="removeUser:">removeUser: userName</body></methods><methods><class-id>ManageUserInterface</class-id> <category>actions</category><body package="view" selector="removeUser">removeUser	"This stub method was generated by UIDefiner"	| c |	c := ManageUserController new.	c removeUser: userList selection.	^self</body></methods><methods><class-id>ManageUserInterface</class-id> <category>actions</category><body package="view" selector="removeUser">removeUser	"This stub method was generated by UIDefiner"	| c |	c := ManageUserController new.	c removeUser: userList selection.</body></methods><methods><class-id>ManageUserController</class-id> <category>controlling</category><body package="controller" selector="removeUser:">removeUser: userName	"Remove the user to the UserArray"</body></methods><methods><class-id>ManageUserController</class-id> <category>controlling</category><body package="controller" selector="removeUser:">removeUser: userName	"Remove the user to the UserArray"		self users remove: userName</body></methods><do-it>UserArray organization addCategory: #removing</do-it><methods><class-id>UserArray</class-id> <category>removing</category><body package="model" selector="remove:">remove: userName</body></methods><methods><class-id>UserArray</class-id> <category>removing</category><body package="model" selector="remove:">remove: userName	| i b |	</body></methods><methods><class-id>UserArray</class-id> <category>removing</category><body package="model" selector="remove:">remove: userName	| i |	i := self indexOf: userName.	(i = 0) ifFalse: [		self at: i put: nil.	].</body></methods><do-it>ManageUserInterface organization addCategory: #'initialize-release'</do-it><methods><class-id>ManageUserInterface</class-id> <category>initialize-release</category><body package="view" selector="initialize">initialize	</body></methods><methods><class-id>ManageUserInterface</class-id> <category>initialize-release</category><body package="view" selector="initialize">initialize	self userList list: UserArray getInstance.</body></methods><class><name>ManageUserInterface</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>userName userList </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>view</package></attributes></class><do-it>Smalltalk defineClass: #ManageUserInterface	superclass: #{UI.ApplicationModel}	indexedType: #none	private: false	instanceVariableNames: 'userName userList  '	classInstanceVariableNames: ''	imports: ''	category: ''</do-it><methods><class-id>ManageUserInterface</class-id> <category>actions</category><body package="view" selector="OKButton">OKButton	"This stub method was generated by UIDefiner"	^self</body></methods><methods><class-id>ManageUserInterface class</class-id> <category>interface specs</category><body package="view" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Manage users' 			#bounds: #(#{Graphics.Rectangle} 816 477 1105 709 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.SequenceViewSpec} 					#layout: #(#{Graphics.LayoutFrame} 18 0 16 0 154 0 180 0 ) 					#name: #userList 					#model: #userList 					#callbacksSpec: 					#(#{UI.UIEventCallbackSubSpec} 						#valueChangeSelector: #onChangeUserList ) 					#useModifierKeys: true 					#selectionType: #highlight ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 23 0 199 0 75 0 220 0 ) 					#name: #removeUser 					#model: #removeUser 					#label: 'Remove' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 222 0 53 0 274 0 74 0 ) 					#name: #addUser 					#model: #addUser 					#label: 'Add' 					#defaultable: true ) 				#(#{UI.InputFieldSpec} 					#layout: #(#{Graphics.LayoutFrame} 177 0 17 0 277 0 42 0 ) 					#name: #userName 					#model: #userName ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 227 0 198 0 279 0 219 0 ) 					#name: #OKButton 					#model: #OKButton 					#label: 'OK' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>ManageUserInterface</class-id> <category>actions</category><body package="view" selector="OKButton">OKButton	"Close the window"	^self</body></methods><do-it>UI.ApplicationModel</do-it><methods><class-id>ChoiceUserInterface class</class-id> <category>interface specs</category><body package="view" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Choice user' 			#bounds: #(#{Graphics.Rectangle} 815 583 1105 642 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 12 0 17 0 148 0 38 0 ) 					#name: #UserChoice 					#label: 					#(#{Kernel.UserMessage} 						#key: nil 						#defaultString: 'UserChoice' 						#catalogID: #'UserArray searchAndCreate' ) ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 181 0 17 0 264 0 38 0 ) 					#name: #ManageButton 					#label: 'Manage users' 					#isDefault: false 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 11 0 56 0 63 0 77 0 ) 					#name: #OKButton 					#label: 'OK' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 72 0 56 0 124 0 77 0 ) 					#name: #CancelButton1 					#label: 'Cancel' 					#defaultable: true ) ) ) )</body></methods><class><name>ChoiceUserInterface</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>view</package></attributes></class><do-it>Smalltalk defineClass: #ChoiceUserInterface	superclass: #{UI.ApplicationModel}	indexedType: #none	private: false	instanceVariableNames: ' '	classInstanceVariableNames: ''	imports: ''	category: ''</do-it><methods><class-id>ChoiceUserInterface</class-id> <category>actions</category><body package="view" selector="OKButton">OKButton	"This stub method was generated by UIDefiner"	^self</body></methods><methods><class-id>ChoiceUserInterface</class-id> <category>actions</category><body package="view" selector="CancelButton">CancelButton	"This stub method was generated by UIDefiner"	^self</body></methods><methods><class-id>ChoiceUserInterface</class-id> <category>actions</category><body package="view" selector="manageUser">manageUser	"This stub method was generated by UIDefiner"	^self</body></methods><methods><class-id>ChoiceUserInterface class</class-id> <category>interface specs</category><body package="view" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Choice user' 			#bounds: #(#{Graphics.Rectangle} 828 583 1118 642 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 12 0 17 0 148 0 38 0 ) 					#name: #UserChoice 					#label: 					#(#{Kernel.UserMessage} 						#key: nil 						#defaultString: 'UserChoice' 						#catalogID: #'UserArray searchAndCreate' ) ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 181 0 17 0 264 0 38 0 ) 					#name: #ManageButton 					#model: #manageUser 					#label: 'Manage users' 					#isDefault: false 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 11 0 56 0 63 0 77 0 ) 					#name: #OKButton 					#model: #OKButton 					#label: 'OK' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 72 0 56 0 124 0 77 0 ) 					#name: #CancelButton 					#model: #CancelButton 					#label: 'Cancel' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>ChoiceUserInterface</class-id> <category>actions</category><body package="view" selector="manageUser">manageUser	"Open the ManageUserInterface"</body></methods><methods><class-id>ChoiceUserInterface</class-id> <category>actions</category><body package="view" selector="manageUser">manageUser	"Open the ManageUserInterface"	ManageUserInterface new open.</body></methods><methods><class-id>ChoiceUserInterface class</class-id> <category>interface specs</category><body package="view" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Choice user' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 815 588 1105 688 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 12 0 17 0 148 0 38 0 ) 					#name: #UserChoice 					#label: 					#(#{Kernel.UserMessage} 						#key: nil 						#defaultString: 'UserChoice' 						#catalogID: #'UserArray searchAndCreate' ) ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 181 0 17 0 264 0 38 0 ) 					#name: #ManageButton 					#model: #manageUser 					#label: 'Manage users' 					#isDefault: false 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 11 0 56 0 63 0 77 0 ) 					#name: #OKButton 					#model: #OKButton 					#label: 'OK' 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 72 0 56 0 124 0 77 0 ) 					#name: #CancelButton 					#model: #CancelButton 					#label: 'Cancel' 					#defaultable: true ) ) ) )</body></methods><methods><class-id>ManageUserInterface</class-id> <category>actions</category><body package="view" selector="OKButton">OKButton	"Close the window"		^self</body></methods><methods><class-id>ManageUserInterface</class-id> <category>actions</category><body package="view" selector="OKButton">OKButton	"Close the window"	self mainWindow stop.	^self</body></methods><methods><class-id>ManageUserInterface</class-id> <category>actions</category><body package="view" selector="OKButton">OKButton	"Close the window"		^self</body></methods><class><name>ChoiceUserInterface</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>view</package></attributes></class><do-it>Smalltalk defineClass: #ChoiceUserInterface	superclass: #{UI.ApplicationModel}	indexedType: #none	private: false	instanceVariableNames: ' '	classInstanceVariableNames: ''	imports: ''	category: ''</do-it><methods><class-id>ChoiceUserInterface class</class-id> <category>interface specs</category><body package="view" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Choice user' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 815 588 1105 688 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.MenuButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 12 0 17 0 148 0 38 0 ) 					#name: #UserChoice 					#label: 					#(#{Kernel.UserMessage} 						#key: nil 						#defaultString: 'UserChoice' 						#catalogID: #'UserArray searchAndCreate' ) ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 181 0 17 0 264 0 38 0 ) 					#name: #ManageButton 					#model: #manageUser 					#label: 'Manage users' 					#isDefault: false 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 11 0 56 0 63 0 77 0 ) 					#name: #OKButton 					#model: #OKButton 					#label: 'OK' 					#defaultable: true ) ) ) )</body></methods><do-it>ChoiceUserInterface organization addCategory: #'initialize-release'</do-it><class><name>ChoiceUserInterface</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>userChoice </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>view</package></attributes></class><do-it>Smalltalk defineClass: #ChoiceUserInterface	superclass: #{UI.ApplicationModel}	indexedType: #none	private: false	instanceVariableNames: ' userChoice '	classInstanceVariableNames: ''	imports: ''	category: ''</do-it><methods><class-id>ChoiceUserInterface</class-id> <category>aspects</category><body package="view" selector="userChoice">userChoice	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^userChoice isNil		ifTrue:			[userChoice := nil asValue]		ifFalse:			[userChoice]</body></methods><methods><class-id>ChoiceUserInterface</class-id> <category>initialize-release</category><body package="view" selector="initialize">initialize	self userChoice list: UserArray getInstance.</body></methods><class><name>UserArray</name><environment>Smalltalk</environment><super>Core.Array</super><private>false</private><indexed-type>objects</indexed-type><inst-vars>currentUser </inst-vars><class-inst-vars>classInstance </class-inst-vars><imports></imports><category></category><attributes><package>model</package></attributes></class><methods><class-id>UserArray</class-id> <category>accessing</category><body package="model" selector="currentUser">currentUser	^currentUser</body></methods><methods><class-id>UserArray</class-id> <category>accessing</category><body package="model" selector="currentUser:">currentUser: anObject	currentUser := anObject</body></methods><methods><class-id>UserArray</class-id> <category>initialize-release</category><body package="model" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	self currentUser: (self at: 1).	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>ChoiceUserInterface</class-id> <category>initialize-release</category><body package="view" selector="initialize">initialize	self userChoice list: (UserArray getInstance).	self userChoice selection: (UserArray getInstance currentUser).</body></methods><methods><class-id>ManageUserInterface</class-id> <category>actions</category><body package="view" selector="OKButton">OKButton	"Close the window"	self closeRequest.	^self</body></methods><methods><class-id>ChoiceUserInterface</class-id> <category>actions</category><body package="view" selector="OKButton">OKButton	"Close the window"	self closeRequest.	^self</body></methods><methods><class-id>ChoiceUserInterface</class-id> <category>initialize-release</category><body package="view" selector="initialize">initialize	self userChoice selection: (UserArray getInstance currentUser).</body></methods><methods><class-id>ChoiceUserInterface</class-id> <category>initialize-release</category><body package="view" selector="initialize">initialize</body></methods><methods><class-id>ChoiceUserInterface</class-id> <category>initialize-release</category><body package="view" selector="initialize">initialize	self userChoice withAll: UserArray getInstance.</body></methods><methods><class-id>ChoiceUserInterface</class-id> <category>initialize-release</category><body package="view" selector="initialize">initialize	self userChoice.</body></methods><methods><class-id>ChoiceUserInterface class</class-id> <category>interface specs</category><body package="view" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Choice user' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 808 586 1098 686 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 178 0 14 0 261 0 35 0 ) 					#name: #ManageButton 					#model: #manageUser 					#label: 'Manage users' 					#isDefault: false 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 11 0 56 0 63 0 77 0 ) 					#name: #OKButton 					#model: #OKButton 					#label: 'OK' 					#defaultable: true ) 				#(#{UI.ComboBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 7 0 13 0 107 0 38 0 ) 					#name: #userChoice 					#model: #userChoice ) ) ) )</body></methods><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/kevin/VisualWorks Projects/ProjetInfo606/ProjetInfo606.im' 'February 4, 2021' '4:52:41 PM')""An image file /home/kevin/VisualWorks Projects/ProjetInfo606/ProjetInfo606.im was created at 16:52:41 on 4 février 2021."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/kevin/VisualWorks Projects/ProjetInfo606/ProjetInfo606.im' 'February 4, 2021' '4:52:45 PM')""An image file /home/kevin/VisualWorks Projects/ProjetInfo606/ProjetInfo606.im was created at 16:52:45 on 4 février 2021."</do-it><methods><class-id>ChoiceUserInterface</class-id> <category>initialize-release</category><body package="view" selector="initialize">initialize	self userChoice list: UserArray getInstance.</body></methods><methods><class-id>ChoiceUserInterface</class-id> <category>initialize-release</category><body package="view" selector="initialize">initialize</body></methods><methods><class-id>ChoiceUserInterface</class-id> <category>initialize-release</category><body package="view" selector="initialize">initialize	self userChoice.</body></methods><methods><class-id>ChoiceUserInterface class</class-id> <category>interface specs</category><body package="view" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Choice user' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 828 599 1118 699 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 178 0 14 0 261 0 35 0 ) 					#name: #ManageButton 					#model: #manageUser 					#label: 'Manage users' 					#isDefault: false 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 11 0 56 0 63 0 77 0 ) 					#name: #OKButton 					#model: #OKButton 					#label: 'OK' 					#defaultable: true ) 				#(#{UI.ComboBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 7 0 13 0 107 0 38 0 ) 					#name: #userChoice 					#model: #userChoice ) ) ) )</body></methods><remove-selector><class-id>Core.Class</class-id> <selector>user:</selector></remove-selector><remove-selector><class-id>Core.Class</class-id> <selector>user</selector></remove-selector><class><name>Class</name><environment>Core</environment><super>Core.ClassDescription</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name classPool environment </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Classes</category><attributes><package>Kernel-Classes</package></attributes></class><methods><class-id>Core.Class class</class-id> <category>accessing</category><body package="Kernel-Classes" selector="date">date	^date</body></methods><methods><class-id>Core.Class class</class-id> <category>accessing</category><body package="Kernel-Classes" selector="date:">date: anObject	date := anObject</body></methods><methods><class-id>Core.Class class</class-id> <category>accessing</category><body package="Kernel-Classes" selector="user">user	^user</body></methods><methods><class-id>Core.Class class</class-id> <category>accessing</category><body package="Kernel-Classes" selector="user:">user: anObject	user := anObject</body></methods><methods><class-id>ChoiceUserInterface</class-id> <category>initialize-release</category><body package="view" selector="initialize">initialize	self userChoice = UserArray getInstance asValue.</body></methods><methods><class-id>ChoiceUserInterface</class-id> <category>initialize-release</category><body package="view" selector="initialize">initialize	self userChoice. "UserArray getInstance asValue."</body></methods><class><name>ChoiceUserInterface</name><environment>Smalltalk</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>userChoice userChoices </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>view</package></attributes></class><do-it>Smalltalk defineClass: #ChoiceUserInterface	superclass: #{UI.ApplicationModel}	indexedType: #none	private: false	instanceVariableNames: 'userChoice  userChoices '	classInstanceVariableNames: ''	imports: ''	category: ''</do-it><methods><class-id>ChoiceUserInterface</class-id> <category>aspects</category><body package="view" selector="userChoices">userChoices	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^userChoices isNil		ifTrue:			[userChoices := List new asValue]		ifFalse:			[userChoices]</body></methods><methods><class-id>ChoiceUserInterface</class-id> <category>aspects</category><body package="view" selector="userChoice">userChoice	"This method was generated by UIDefiner.  Any edits made here	may be lost whenever methods are automatically defined.  The	initialization provided below may have been preempted by an	initialize method."	^userChoice isNil		ifTrue:			[userChoice := String new asValue]		ifFalse:			[userChoice]</body></methods><methods><class-id>ChoiceUserInterface class</class-id> <category>interface specs</category><body package="view" selector="windowSpec">windowSpec	"Tools.UIPainter new openOnClass: self andSelector: #windowSpec"	&lt;resource: #canvas&gt;	^#(#{UI.FullSpec} 		#window: 		#(#{UI.WindowSpec} 			#label: 'Choice user' 			#min: #(#{Core.Point} 20 20 ) 			#max: #(#{Core.Point} 0 0 ) 			#bounds: #(#{Graphics.Rectangle} 815 514 1105 614 ) ) 		#component: 		#(#{UI.SpecCollection} 			#collection: #(				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 178 0 14 0 261 0 35 0 ) 					#name: #ManageButton 					#model: #manageUser 					#label: 'Manage users' 					#isDefault: false 					#defaultable: true ) 				#(#{UI.ActionButtonSpec} 					#layout: #(#{Graphics.LayoutFrame} 11 0 56 0 63 0 77 0 ) 					#name: #OKButton 					#model: #OKButton 					#label: 'OK' 					#defaultable: true ) 				#(#{UI.ComboBoxSpec} 					#layout: #(#{Graphics.LayoutFrame} 7 0 13 0 107 0 38 0 ) 					#name: #userChoice 					#model: #userChoice 					#comboList: #userChoices ) ) ) )</body></methods><methods><class-id>ChoiceUserInterface</class-id> <category>initialize-release</category><body package="view" selector="initialize">initialize	userChoices := UserArray getInstance asValue.</body></methods><methods><class-id>ChoiceUserInterface</class-id> <category>actions</category><body package="view" selector="OKButton">OKButton	"Close the window"	UserArray getInstance currentUser: userChoice.	self closeRequest.	^self</body></methods><do-it>c := UserArray getInstance.</do-it><do-it>c := UserArray getInstance.</do-it><do-it>c := UserArray getInstance.</do-it><do-it>c</do-it><methods><class-id>ChoiceUserInterface</class-id> <category>actions</category><body package="view" selector="OKButton">OKButton	"Close the window"	UserArray getInstance currentUser: userChoice asValue.	self closeRequest.	^self</body></methods><methods><class-id>ChoiceUserInterface</class-id> <category>actions</category><body package="view" selector="OKButton">OKButton	"Close the window"	UserArray getInstance currentUser: userChoice value.	self closeRequest.	^self</body></methods><do-it>Object</do-it><do-it>Class class</do-it><do-it>Class class</do-it><do-it>Smalltalk</do-it><do-it>Class class</do-it><do-it>Smalltalk</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/kevin/VisualWorks Projects/ProjetInfo606/ProjetInfo606.im' 'February 8, 2021' '2:48:56 PM')""An image file /home/kevin/VisualWorks Projects/ProjetInfo606/ProjetInfo606.im was created at 14:48:56 on 8 février 2021."</do-it><do-it>'----SNAPSHOT----'</do-it><do-it>"#('/home/kevin/VisualWorks Projects/ProjetInfo606/ProjetInfo606.im' 'February 8, 2021' '2:48:59 PM')""An image file /home/kevin/VisualWorks Projects/ProjetInfo606/ProjetInfo606.im was created at 14:48:59 on 8 février 2021."</do-it>